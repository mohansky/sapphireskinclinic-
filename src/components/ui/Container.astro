--- 
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const containerVariants = cva(" ", {
  variants: {
    variant: {
      default: "p-3",
      light: "text-black bg-white",
      dark: "text-white bg-black",
    },
    width: {
      marginxy:
        "sm:max-w-xl md:max-w-4xl lg:max-w-5xl xl:max-w-6xl 2xl:max-w-7xl px-2 md:px-0 mx-auto py-10 md:py-20 lg:py-28",
      marginx:
        "sm:max-w-xl md:max-w-4xl lg:max-w-5xl xl:max-w-6xl 2xl:max-w-7xl px-2 md:px-0 mx-auto",
      marginy: "w-full my-28",
      nomargin: "w-full",
    },
    animate: {
      true: "",
      false: "",
    },
  },
  defaultVariants: {
    variant: "default",
    width: "marginxy",
    animate: true,
  },
});

interface Props extends VariantProps<typeof containerVariants> {
  class?: string;
  animate?: boolean;
}

const {
  variant,
  width,
  animate = true,
  class: className,
  ...props
} = Astro.props;

const containerClass = cn(
  containerVariants({ variant, width, animate, className })
);
---

{animate ? (
  <div 
    class={containerClass}
    {...props}
    data-animate
  >
    <div 
      class="opacity-0 transition-opacity duration-900 ease-[cubic-bezier(0.17,0.55,0.55,1)] delay-500"
      data-animated-content
    >
      <slot />
    </div>
  </div>
) : (
  <div class={containerClass} {...props}>
    <slot />
  </div>
)}

<script>
  // Handle intersection observer for animation
  const animatedContainers = document.querySelectorAll('[data-animate]');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const content = entry.target.querySelector('[data-animated-content]');
        if (content) {
          content.classList.remove('opacity-0');
          content.classList.add('opacity-100');
        }
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0,
    rootMargin: '0px' // Adding this option to make TypeScript happy
  } as IntersectionObserverInit);

  animatedContainers.forEach((container) => {
    observer.observe(container);
  });
</script>