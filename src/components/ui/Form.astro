---
import { server } from "@/actions/index";
import Heading from "./Heading.astro";
import Button from "./Button.astro";
import LoadingSpinnerIcon from "../icons/LoadingSpinnerIcon.astro";
---

<div>
  <Heading size="lg" fontweight="medium" fontstyle="marcellus" class="mb-10">
    Please do get in touch with us.
  </Heading>
  <form
    id="contact-form"
    action={server.contactForm}
    method="POST"
    class="flex flex-col gap-6"
  >
    <!-- Honeypot field for spam protection -->
    <input
      class="hidden"
      type="text"
      id="a_password"
      name="a_password"
      tabindex="-1"
      autocomplete="off"
    />
    <div class="form-control">
      <input
        type="text"
        name="firstName"
        id="firstName"
        placeholder="Name"
        class="input border-b border-0 input-lg w-full focus:outline-none py-10 rounded-none"
        required
      />
      <span class="text-error text-sm hidden error-message" id="firstName-error"
      ></span>
    </div>
    <div class="form-control">
      <input
        type="email"
        name="email"
        id="email"
        placeholder="Email Address"
        class="input border-b border-0 input-lg w-full focus:outline-none py-10 rounded-none"
        required
      />
      <span class="text-error text-sm hidden error-message" id="email-error"
      ></span>
    </div>
    <div class="form-control">
      <input
        type="tel"
        name="phone"
        id="phone"
        placeholder="Phone Number"
        class="input border-b border-0 input-lg w-full focus:outline-none py-10 rounded-none"
        required
      />
      <span class="text-error text-sm hidden error-message" id="phone-error"
      ></span>
    </div> 
    <div class="form-control">
      <label class="select border-b border-0 input-lg w-full focus:outline-none py-10 rounded-none">
        <span class="label">Select Location</span>
        <select class="select border-b border-0 input-lg w-full focus:outline-none py-10 rounded-none">
          <option value="Koramangala">Koramangala</option>
          <option value="JPNagar">JP Nagar</option>
        </select>
      </label>
      <!-- <label for="location" class="label">Select Location</label>
      <select
        name="location"
        id="location" 
        class="select border-b border-0 input-lg w-full focus:outline-none py-10 rounded-none"
        required
      >
        <option value="" disabled selected class="text-base-content/60">Select Location</option>
        <option value="Koramangala">Koramangala</option>
        <option value="JPNagar">JP Nagar</option>
      </select> -->
      <span class="text-error text-sm hidden error-message" id="location-error"
      ></span>
    </div>
    <div class="form-control">
      <textarea
        name="message"
        id="message"
        class="textarea textarea-bordered border-b border-0 input-lg w-full focus:outline-none py-5 rounded-none"
        rows="5"
        placeholder="Your Message"
        required></textarea>
      <span class="text-error text-sm hidden error-message" id="message-error"
      ></span>
    </div>
    <Button type="submit" color="primary" themed id="submit-btn" class="flex">
      <span id="submit-text">Submit</span>
      <span id="loading-spinner" class="hidden">
        <span class="inline-flex items-center">
          <LoadingSpinnerIcon class="animate-spin -ml-1 mr-3 h-5 w-5" />
          Submitting...
        </span>
      </span>
    </Button>
  </form>
</div>

<div class="toast z-30" style="display: none;">
  <div class="alert alert-success">
    <span
      >Form submitted, thank you for your message. We will get back to you soon.</span
    >
  </div>
</div>

<script>
  import { isInputError, actions } from "astro:actions";

  const form = document.getElementById("contact-form") as HTMLFormElement;
  const toast = document.querySelector(".toast") as HTMLDivElement;
  const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
  const submitText = document.getElementById("submit-text") as HTMLSpanElement;
  const loadingSpinner = document.getElementById(
    "loading-spinner"
  ) as HTMLSpanElement;

  // Validation patterns
  const patterns = {
    email: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
    phone: /^(?:(?:\+|0{0,2})91(\s*[-]\s*)?|[0]?)?[6789]\d{9}$/, // Indian phone number pattern
  };

  // Client-side validation function
  function validateField(
    field: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
  ) {
    const fieldName = field.id;
    const errorElement = document.getElementById(
      `${fieldName}-error`
    ) as HTMLSpanElement;
    let isValid = true;

    // Check required fields
    if (field.required && !field.value.trim()) {
      errorElement.textContent = `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} is required`;
      errorElement.classList.remove("hidden");
      isValid = false;
    }
    // Check email format
    else if (fieldName === "email" && !patterns.email.test(field.value)) {
      errorElement.textContent = "Please enter a valid email address";
      errorElement.classList.remove("hidden");
      isValid = false;
    }
    // Check phone format
    else if (fieldName === "phone" && !patterns.phone.test(field.value)) {
      errorElement.textContent = "Please enter a valid phone number";
      errorElement.classList.remove("hidden");
      isValid = false;
    }
    // Check if location is selected
    else if (fieldName === "location" && field.value === "") {
      errorElement.textContent = "Please select a location";
      errorElement.classList.remove("hidden");
      isValid = false;
    } else {
      errorElement.classList.add("hidden");
    }

    return isValid;
  }

  // Add input event listeners for real-time validation
  const formFields = form.querySelectorAll(
    "input[required], textarea[required], select[required]"
  );
  formFields.forEach((field) => {
    field.addEventListener("input", () => {
      validateField(
        field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
      );
    });

    field.addEventListener("blur", () => {
      validateField(
        field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
      );
    });

    // For select elements, also add change event listener
    if (field instanceof HTMLSelectElement) {
      field.addEventListener("change", () => {
        validateField(field);
      });
    }
  });

  // Form submission handler
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Validate all fields before submission
    let isFormValid = true;
    formFields.forEach((field) => {
      if (
        !validateField(
          field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
        )
      ) {
        isFormValid = false;
      }
    });

    if (!isFormValid) {
      return;
    }

    // Honeypot check
    const honeypot = document.getElementById("a_password") as HTMLInputElement;
    if (honeypot && honeypot.value.trim() !== "") {
      console.warn("Spam detected: honeypot field is filled.");
      return;
    }

    // Show loading state
    submitBtn.disabled = true;
    submitText.classList.add("hidden");
    loadingSpinner.classList.remove("hidden");

    try {
      const formData = new FormData(form);
      const { data, error } = await actions.contactForm(formData);

      if (data) {
        form.reset();
        if (toast) {
          toast.style.display = "block";
          setTimeout(() => {
            toast.style.display = "none";
          }, 3000);
        }

        // Reset form field validations
        document.querySelectorAll(".error-message").forEach((el) => {
          el.classList.add("hidden");
        });
      }

      if (error) {
        if (isInputError(error)) {
          // Get Zod validation errors from the ActionInputError
          // Properly access the errors using the specific API
          handleInputError(error);
        } else {
          // For non-validation errors, show generic message or error.message if available
          const errorMessage =
            typeof error === "object" && error !== null && "message" in error
              ? String(error.message)
              : "An error occurred. Please try again later.";
          showErrorToast(errorMessage);
        }
      }
    } catch (error) {
      // console.error("Form submission error:", error);
      showErrorToast("An error occurred. Please try again later.");
    } finally {
      // Hide loading state
      submitBtn.disabled = false;
      submitText.classList.remove("hidden");
      loadingSpinner.classList.add("hidden");
    }
  });

  // Helper function to handle input validation errors
  function handleInputError(error: any): void {
    // Try to get the input error using alternative approaches
    // First try accessing the issues directly if they exist
    if (error && typeof error === "object") {
      // Try to find field-specific errors
      // Common field names in our form
      const formFields = ["firstName", "email", "phone", "location", "message"];

      for (const field of formFields) {
        // Check if the error has information about this field
        let fieldError = "";

        // Try different potential structures of the error object
        if (error[field] && typeof error[field] === "string") {
          fieldError = error[field];
        } else if (Array.isArray(error[field]) && error[field].length > 0) {
          fieldError = error[field][0];
        } else if (error.issues && Array.isArray(error.issues)) {
          const issue = error.issues.find(
            (i: { path?: string[]; message?: string }) => i.path?.[0] === field
          );
          if (issue && issue.message) fieldError = issue.message;
        }

        if (fieldError) {
          const errorElement = document.getElementById(`${field}-error`);
          if (errorElement) {
            errorElement.textContent = fieldError;
            errorElement.classList.remove("hidden");
            return; // Show only first error
          }
        }
      }
    }

    // If we couldn't find specific field errors, show generic message
    const genericMessage =
      error && typeof error === "object" && "message" in error
        ? String(error.message)
        : "Please check your input and try again.";
    showErrorToast(genericMessage);
  }

  function showErrorToast(message: string): void {
    const errorToast = document.createElement("div");
    errorToast.className = "toast z-30";
    errorToast.style.display = "block";
    errorToast.innerHTML = `
      <div class="alert alert-error">
        <span>${message}</span>
      </div>
    `;
    document.body.appendChild(errorToast);

    setTimeout(() => {
      errorToast.style.display = "none";
      errorToast.remove();
    }, 3000);
  }

  // Handle fieldsets with "require one" data attribute
  for (const fieldset of document.querySelectorAll(
    "fieldset[data-require-one]"
  )) {
    const updateValidity = () => {
      const elements = Array.from(
        (fieldset as HTMLFieldSetElement).elements
      ).filter(
        (element): element is HTMLInputElement =>
          element instanceof HTMLInputElement
      );
      if (elements.some((e) => e.checked)) {
        elements[0].setCustomValidity("");
      } else {
        elements[0].setCustomValidity("At least one required!");
      }
    };
    const form = (fieldset as HTMLFieldSetElement).form;
    if (form) {
      form.addEventListener("change", updateValidity);
    }
    updateValidity();
  }
</script>
